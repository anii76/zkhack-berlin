import { expect } from "chai";
import hre, { ethers } from "hardhat";
import { HonkVerifier } from "../typechain-types";
import { BytesLike } from "ethers";

export const SCALE = 2 ** 16;
export const MATCH_THRESHOLD = 1_500_000_000;

export function quantize(embedding: number[]): number[] {
  return embedding.map((f) => Math.round(f * SCALE));
}


function floatToBytes32(value: number): BytesLike {
  // Convert float to bytes32 representation
  const buffer = new ArrayBuffer(32);
  const view = new DataView(buffer);
  view.setFloat32(0, value, false); // Big-endian
  return new Uint8Array(buffer);
}

// const faceA = Array.from({ length: 128 }, (_, i) => i / 127);
const faceA = quantize([
  -0.08460227400064468,
  0.11148299276828766,
  0.02201424539089203,
  -0.018183385953307152,
  0.022942857816815376,
  -0.06601355224847794,
  0.028203872963786125,
  -0.07177001982927322,
  0.12454010546207428,
  -0.004166876431554556,
  0.23621992766857147,
  -0.06311516463756561,
  -0.218876913189888,
  -0.10939909517765045,
  0.02094797044992447,
  0.12213332206010818,
  -0.19191874563694,
  -0.046026092022657394,
  -0.1193809062242508,
  -0.08672604709863663,
  0.000057578734413255006,
  0.010536786168813705,
  -0.020717430859804153,
  0.05501873046159744,
  -0.07481793314218521,
  -0.23820994794368744,
  -0.07386299222707748,
  -0.13371886312961578,
  0.0679914578795433,
  -0.07733038067817688,
  0.03284679353237152,
  0.05409698188304901,
  -0.19304481148719788,
  -0.04093514382839203,
  -0.008600038476288319,
  0.011137006804347038,
  0.03637980669736862,
  -0.03025260753929615,
  0.16129907965660095,
  -0.013699719682335854,
  -0.09933990240097046,
  -0.018066389486193657,
  0.023826004937291145,
  0.2203800231218338,
  0.11091668158769608,
  0.025229766964912415,
  0.004533696919679642,
  -0.011985194869339466,
  0.05964302271604538,
  -0.19350555539131165,
  -0.031779706478118896,
  0.1329362690448761,
  0.14156153798103333,
  0.0698271170258522,
  0.007138680201023817,
  -0.19272248446941376,
  -0.009221176616847515,
  0.04526660591363907,
  -0.1947561800479889,
  0.057803746312856674,
  0.012364414520561695,
  -0.08010275661945343,
  -0.09510831534862518,
  -0.0837303102016449,
  0.2584238350391388,
  0.091049425303936,
  -0.15655995905399323,
  -0.15094715356826782,
  0.18415816128253937,
  -0.13356523215770721,
  -0.021933216601610184,
  0.0869351401925087,
  -0.0822947546839714,
  -0.1305094063282013,
  -0.27475249767303467,
  0.07276053726673126,
  0.34007468819618225,
  0.11576194316148758,
  -0.1941196173429489,
  0.0396251305937767,
  -0.19500362873077393,
  -0.030570559203624725,
  -0.050861939787864685,
  0.06295183300971985,
  -0.07246918231248856,
  0.05118342861533165,
  -0.06624041497707367,
  -0.0140208899974823,
  0.1285490244626999,
  -0.016027523204684258,
  -0.01009646337479353,
  0.21301738917827606,
  -0.04271277040243149,
  0.04022204875946045,
  -0.06528131663799286,
  -0.0640888512134552,
  -0.05649277940392494,
  -0.04139712080359459,
  -0.01733282022178173,
  -0.00027374792261980474,
  0.040236759930849075,
  -0.12493070960044861,
  0.015133548527956009,
  0.1089131310582161,
  -0.18192997574806213,
  0.15053050220012665,
  0.025050435215234756,
  0.011250614188611507,
  0.017515039071440697,
  0.10311561077833176,
  -0.05950216203927994,
  -0.03540581837296486,
  0.17413587868213654,
  -0.2995445132255554,
  0.22767874598503113,
  0.16206935048103333,
  0.02132304385304451,
  0.10439158976078033,
  0.022755473852157593,
  0.145701065659523,
  -0.04279904067516327,
  0.004569071810692549,
  -0.15576845407485962,
  -0.08817556500434875,
  0.030180439352989197,
  -0.07323561608791351,
  0.003391844220459461,
  0.04062287136912346
]);
const faceABytes: BytesLike[] = faceA.map(floatToBytes32)
const faceB = quantize([
  -0.0667976438999176,
  0.06833327561616898,
  0.040508970618247986,
  0.003195661585777998,
  -0.027407953515648842,
  -0.07023762166500092,
  -0.04668023809790611,
  -0.08459387719631195,
  0.10123951733112335,
  -0.036768972873687744,
  0.18412016332149506,
  -0.09595773369073868,
  -0.2710888981819153,
  -0.01515295822173357,
  -0.05288125202059746,
  0.13280874490737915,
  -0.21283042430877686,
  -0.04748569056391716,
  -0.07369938492774963,
  -0.09049636870622635,
  0.07073721289634705,
  0.02577325887978077,
  -0.0064418441615998745,
  0.03758256509900093,
  -0.1394963562488556,
  -0.27557873725891113,
  -0.09626347571611404,
  -0.10135892778635025,
  -0.0018699081847444177,
  -0.08551406860351562,
  0.034553784877061844,
  0.07904639840126038,
  -0.17255793511867523,
  0.004329395946115255,
  0.004924989305436611,
  0.027993541210889816,
  0.052591536194086075,
  -0.0838751345872879,
  0.1726716309785843,
  0.031154843047261238,
  -0.14038725197315216,
  0.02448616921901703,
  0.04103856906294823,
  0.23202775418758392,
  0.15489999949932098,
  0.05733262374997139,
  0.01922043412923813,
  -0.031075404956936836,
  0.059737663716077805,
  -0.23619283735752106,
  -0.0327112078666687,
  0.18760161101818085,
  0.07140309363603592,
  0.07012061774730682,
  0.0037015227135270834,
  -0.15220612287521362,
  0.00013403125922195613,
  0.08020704984664917,
  -0.1676456183195114,
  0.0412621796131134,
  0.06975005567073822,
  -0.07961190491914749,
  -0.025113916024565697,
  -0.06322422623634338,
  0.22092002630233765,
  0.09142901748418808,
  -0.16086816787719727,
  -0.08133877068758011,
  0.16093896329402924,
  -0.17259395122528076,
  -0.05241232365369797,
  0.043495580554008484,
  -0.12053288519382477,
  -0.16303281486034393,
  -0.27389535307884216,
  0.045584529638290405,
  0.3660812973976135,
  0.11998102068901062,
  -0.158636674284935,
  0.025480369105935097,
  -0.11299528926610947,
  0.003001227043569088,
  0.025624345988035202,
  0.11048399657011032,
  -0.03858395665884018,
  -0.0005937787937000394,
  -0.045092638581991196,
  0.029312895610928535,
  0.1938083916902542,
  -0.015771495178341866,
  -0.005773566663265228,
  0.23809505999088287,
  -0.019484257325530052,
  -0.0014608883066102862,
  -0.03718496486544609,
  -0.0003164342779200524,
  -0.06150723993778229,
  -0.057560697197914124,
  -0.017631493508815765,
  0.028843319043517113,
  0.03158630430698395,
  -0.08932098001241684,
  0.0024244622327387333,
  0.12857352197170258,
  -0.17553004622459412,
  0.11404970288276672,
  -0.024347245693206787,
  -0.04461264982819557,
  0.003702892456203699,
  0.044811028987169266,
  -0.05040318891406059,
  -0.013229161500930786,
  0.15989068150520325,
  -0.277274489402771,
  0.18167026340961456,
  0.19499865174293518,
  0.000018833174181054346,
  0.10720263421535492,
  -0.0017395192990079522,
  0.13774769008159637,
  -0.03528660535812378,
  -0.007518227677792311,
  -0.15452811121940613,
  -0.11858592927455902,
  0.017836112529039383,
  -0.02661590650677681,
  0.00444063963368535,
  -0.007174076046794653
]);
const faceBBytes: BytesLike[] = faceB.map(floatToBytes32);

let verifierContract: HonkVerifier;
before(async () => {
  verifierContract = await ethers.deployContract("HonkVerifier");
})

it("proves and verifies on-chain", async () => {
  // Deploy a verifier contract
  const contractFactory = await ethers.getContractFactory("ZFace");
  const contract = await contractFactory.deploy(await verifierContract.getAddress(), faceABytes);
  await contract.waitForDeployment();

  const address = await contract.getAddress();
  console.debug({ address });

  // Generate a proof
  const { noir, backend } = await hre.noir.getCircuit("my_noir");

  // Convert faceA to Quantized format: { x: value }
  const probeFace = faceA.map(x => ({ x }));
  const referenceFace = faceA.map(x => ({ x }));

  const input = { probeFace, referenceFace };
  console.debug({ input });
  const { witness } = await noir.execute(input);
  const { proof, publicInputs } = await backend.generateProof(witness, {
    keccak: true,
  });
  console.debug({ proof })
  // it matches because we marked y as `pub` in `main.nr`
  // expect(BigInt(publicInputs[30] * 127)).to.eq(BigInt(input.referenceFace[30] * 127));

  // Verify the proof on-chain
  const result = await contract.verify(proof);
  expect(result).to.eq(true);

  // You can also verify in JavaScript.
   const resultJs = await backend.verifyProof(
     {
       proof,
       publicInputs,
     },
     { keccak: true },
  );
  expect(resultJs).to.eq(true);
});
